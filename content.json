{"meta":{"title":"一个有梦想的攻城狮","subtitle":null,"description":"maoweipeng, 梦想, 程序员, 博客","author":"maoweipeng","url":"https://maoweipeng.github.io","root":"/"},"pages":[],"posts":[{"title":"自己动手搭建代理","slug":"自己动手搭建梯子","date":"2018-10-30T15:23:02.000Z","updated":"2018-11-02T13:14:26.118Z","comments":true,"path":"2018/10/30/自己动手搭建梯子/","link":"","permalink":"https://maoweipeng.github.io/2018/10/30/自己动手搭建梯子/","excerpt":"作为程序员，拥有稳定的梯子非常重要。至于为什么，代码写多了你自然明白。","text":"作为程序员，拥有稳定的梯子非常重要。至于为什么，代码写多了你自然明白。 一、说明警告：本教程只讨论技术，想用代理赚钱或者做非法勾当的请立刻离开本站。 在技术上，我使用的代理服务软件是 shadowsocks ，shadowsocks 有很多种语言版本，在 GitHub上分别有不用语言的版本库。不同语言版本的 shadowsocks 有不太相同的安装方法，这里只用 python 版本的来举例说明。下面的教程中用到了 vim 编辑工具和一些基本的 Linux 命令，不会的自行百度。 二、安装python环境本人用的服务器系统是 centOS，所以安装 python 直接使用 yum install python 命令即可，不同操作系统有不同的安装方法，这个非常简单，可自行百度。 安装完成后通过 python –version 命令查看，要是能看到 python 的版本号，说明安装成功。 三、安装pippip 的安装可以参考官网，首先是 curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py， 然后是 python get-pip.py。执行完这两个命令后一般就可以安装成功。 安装可能需要 root 权限，只需在命令前面加上 sudo，执行时输入当前用户的密码即可。同样安装完成后，输入 pip –version，能看到版本号说明就安装成功了。 四、安装shadowsocks通过上面的步骤，相信你已经安装好了最基本的环境，现在进入关键步骤，安装代理软件。安装很简单，只需要一行命令 pip install shadowsocks 。同样如果需要 root 权限则在命令前面加上 sudo。即命令改为 sudo pip install shadowsocks。 五、启动shadowsocks安装好 shadowsocks 后，可以通过命令 ssserver -p 8888 -k password -m aes-256-cfb -d start 直接启动代理服务。但不建议这么做，比较优雅的打开方式是通过配置文件启动。 编写配置文件，执行 vim /etc/shadowsocks.json，添加以下内容到文件种。123456789&#123; \"server\":\"0.0.0.0\", \"server_port\":8888, \"local_address\": \"127.0.0.1\", \"local_port\":1080, \"password\":\"password\", \"timeout\":300, \"method\":\"aes-256-cfb\"&#125; 参数解释(直接看英文最好理解): server: your hostname or server IP (IPv4/IPv6). server_port: server port number. local_address： local address. local_port: local port number. password: a password used to encrypt transfer. timeout: connections timeout in seconds. method: encryption method. 编写好配置文件后，可以通过命令 ssserver -c /etc/shadowsocks.json -d start 就可以启动代理服务啦。 六、更多玩法 配置多用户模式 将上面的配置文件稍加修改，即可配置为多用户模式，其实就是多个端口代理而已。1234567891011121314&#123; \"server\":\"0.0.0.0\", \"local_address\": \"127.0.0.1\", \"local_port\":1080, \"port_password\": &#123; \"8885\": \"password\", \"8886\": \"password\", \"8887\": \"password\", \"8888\": \"password\" &#125;, \"timeout\":300, \"method\":\"aes-256-cfb\", \"fast_open\": false &#125; 配置为系统服务 为了方便对服务的管理，可以将代理服务设置为系统服务。输入命令 vim /etc/systemd/system/shadowsocks.service 并回车，将下面的内容添加到文件中1234567[Unit]Description=Shadowsocks[Service]TimeoutStartSec=0ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json[Install]WantedBy=multi-user.target 完成后就可以使用 systemctl start shadowsocks 命令开启代理服务了。 配置开机启动 不想每次重启服务器都要手动重启代理服务？那就将代理设置为开机自启动吧。首先通过命令 vi /etc/supervisord.conf 编辑配置文件，添加以下内容到文件中。1234567[program:shadowsocks]command=ssserver -c /etc/shadowsocks.jsonautostart=trueautorestart=trueuser=rootlog_stderr=truelogfile=/var/log/shadowsocks.log 接下来再编辑 /etc/rc.local 文件。执行命令 vi /etc/rc.local，将 service supervisord star 添加到文件中，重启服务器之后 shadowsocks 就会自动启动。如果将服务配置为系统服务后，则可以通过 systemctl enable shadowsocks 命令设置为开机自启，通过 systemctl status shadowsocks 查看状态。 七、查看日志代理没成功？启动时添加 –log-file 参数，即启动命令改为 ssserver -c /etc/shadowsocks.json –log-file /var/log/shadowsocks.log -d start启动后可以通过命令 tail -f /var/log/shadowsocks.log 就可以查看实时日志，代理有什么问题直接可以从日志里分析出来。 八、可能遇到的问题 代理开启不成功？可能是端口号被禁用了，通过命令 iptables -A INPUT -p tcp –dport 代理端口号 -j ACCEPT（这里指的代理端口号是指配置文件 shadowsocks.json 中的 server_port ），可以开放端口。 代理开启了，但是上不了网？可能是你的服务器所处安全组没有将代理端口放通，通过服务器提供商的控制面板编辑安全组规则，将代理端口放通即可。 九、客户端代理开启来了，怎么才能访问 Google 呢？ Android, Mac, Windows 的话推荐 GitHub 上的 Shadowsocks 客户端，iOS 由于种种问题，推荐使用 Potatso Lite 客户端，完全免费，不过国内的 AppStore 不支持下载，但可以通过一些方法可以下载到，这里不详细说明。 十、个人观点技术本无罪，被坏人利用了，却可以带来可怕的后果。所以有了自己的梯子自己用就行，千万不要去为了那点钱去做非法交易，把自己折腾进去了就真的不值得啦。 参考：https://www.rxblog.xyz/install-shadowsocks-on-centos-7/https://segmentfault.com/a/1190000012910949https://shadowsocks.org/","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"https://maoweipeng.github.io/tags/工具/"}]},{"title":"RSA算法","slug":"RSA算法","date":"2018-10-28T15:07:40.000Z","updated":"2019-02-28T14:23:33.854Z","comments":true,"path":"2018/10/28/RSA算法/","link":"","permalink":"https://maoweipeng.github.io/2018/10/28/RSA算法/","excerpt":"RSA 算法是一个很重要的加密算法，在有网络通信的地方基本都有 RSA 算法。RSA 算法的思想很容易理解，但是计算量却十分庞大，这也是为什么说 RSA 算法很安全的原因。我们通过一个简单的例子来认识一下 RSA 算法。","text":"RSA 算法是一个很重要的加密算法，在有网络通信的地方基本都有 RSA 算法。RSA 算法的思想很容易理解，但是计算量却十分庞大，这也是为什么说 RSA 算法很安全的原因。我们通过一个简单的例子来认识一下 RSA 算法。 首先 RSA 算法要生成一个密钥对，密钥生成的步骤： 第一步：RSA 的首要任务是要选两个大素数 p和q。比如我选择 3 和 11（实际的 RSA 算法选择的素数是很大的，这里为了方便演示，这里选择两个很小的素数）。 第二步：计算 n = pq，n 就是密钥长度，这个值越大越安全。即 n = 3 * 11 = 33，33 写成二进制的形式是 100001，共六位，所以这里的密钥长度为 6。目前能破解的 RSA 密钥长度为 768 位。实际应用中，RSA 密钥长度一般是 1024 位，有些重要场合甚至是 2048 位。 第三步：计算 n 的欧拉函数 ø(n) = (p-1)(q-1)；即 ø(n) =（3-1）*（11-1）= 20。 第四步：选 e，e 满足 1 &lt; e &lt; ø(n)，并且 gcd[e,ø(n)] = 1（即 e 与 ø(n) 互为素数），这里选 e = 7。 第五步：求 d，根据公式 ed ≡ 1mod[ø(n)] 可得 7d ≡ 1 mod 20，即 7d – 1 = 20β，（β∈Z），即 7d – 20β = 1。相当于求解二元一次方程 7x – 20y = 1 ，解得 x = 3 ，y = 1 ，即 d = 3。 第六步：将 n 和 e 封装成公钥，n 和 d 封装成私钥。所以公钥为（33，7）私钥为（33，3），公钥公布给所有要给自己发信息的用户，私钥自己保密 算出公钥和私钥后就可以进行加密运算了。这里有两个重要的公式加密公式为：C = M^e mod(n)解密公式为：M = C^d mod(n) 其中C为密文，M 为明文 例如我要对 19 这个明文进行加密，C=19^7 mod 33 = 13，即明文 19 的密文位 13 对方接收到密文后通过解密公式 M = C^d mod(n) 可得，M = 13^3 mod 33 = 19","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://maoweipeng.github.io/tags/算法/"}]},{"title":"Vmware不能上网的一种情况","slug":"Vmware不能上网的一种情况","date":"2018-10-28T14:09:40.000Z","updated":"2018-10-28T15:44:30.369Z","comments":true,"path":"2018/10/28/Vmware不能上网的一种情况/","link":"","permalink":"https://maoweipeng.github.io/2018/10/28/Vmware不能上网的一种情况/","excerpt":"最近在搭建一个集群，选用 CentOS6.9 作为主机操作系统，期间在配置网络的时候遇到了很无语的错误，分享出来给自己一个提醒，以后再遇到这种问题的时候能够顺利处理，不再浪费自己宝贵的时间，要是有人也是遇到了这个问题，我将很荣幸为你讲解一下到底是怎么回事。","text":"最近在搭建一个集群，选用 CentOS6.9 作为主机操作系统，期间在配置网络的时候遇到了很无语的错误，分享出来给自己一个提醒，以后再遇到这种问题的时候能够顺利处理，不再浪费自己宝贵的时间，要是有人也是遇到了这个问题，我将很荣幸为你讲解一下到底是怎么回事。首先，我在 VMware 中安装好了一台 CentOS 虚拟机，搭好了 JDK 环境。为了方便创建一个节点，我把我搭建好的 CentOS 克隆了一份，当我在做主机间的连通性测试的时候发现，我的两台 CentOS 主机都是不能上网的，ping 内外网都是不通。这就奇怪了，于是我重新配置了主机的 IP ，发现还是没用。于是我找百度找 Google ，网上有各种解释。 有些解释说是主机禁用了 ping ，看到这个回答后我的第一反应就是不可能，一般新安装的操作系统是不会去禁用 ping 的。当然这只是我自己的认为，为了验证这个不可能性我特意去查看了系统是否禁用了ping。首先使用 sysctl -a 命令查看了内核关于 IPv4 的参数，没毛病。(下图中的二进制值 0 表示 enable，1 表示 disable) 当然还需要看看防火墙有没有将 ping 禁止。要检查防火墙是否有问题，直接关闭防火墙测试一下就好了，毕竟防火墙里面的东西太多了，暂时没必要一个个去查看。经过测试，关闭防火墙也是 ping 不通的。说明不是防火墙问题，把防火墙继续打开。（打开关闭防火墙直接使用 setup 命令进入一个可视化界面，容易操作） 排除 ping 的问题后，我们继续检查网络的配置是否有错 ( 在本地局域网中两台主机不在一个子网中是 ping 不通的 )。我们在 VMware 中菜单栏中的虚拟机 -&gt; 设置中可以看到，我用的是桥接模式上网，都是桥接到同一个网卡设备，两台主机在同一子网中。（有些人选择自定义的网络就有可能会让两台主机不在同一子网中，VMware最多可以创建20个子网，VMnet0 – VMnet19）。 到了这步，还不能连通，有点不科学啊。难道是协议有问题，于是 ping localhost，通了，排除协议问题。到此 IP 地址配置正确，防火墙没有禁掉 ping，协议没错，两台主机在同一子网中，还有涉及到什么呢？ 两台主机要能互通还涉及到了什么网络知识呢？我们从 ping 的过程来分析，首先是A主机发出 ping 命令时，网络层 ICMP 协议封装好一个包，然后进行 IP 路由表搜索，查看缓存中是否有 B 主机的 IP 地址跟 MAC 地址，没有则发送一个 ARP 广播，B 主机收到这个广播后响应 A 主机发出的 ARP 广播并把自身的 IP 地址和 MAC 响应给 A 主机，A 主机再将数据包通过数据链路层、物理层发往 B 主机，B 主机首先识别数据包的目的地址是不是自己，是就接收。在分析这个过程时，我惊喜的发现我还没有检查 MAC 地址的正确性，于是马上敲上 ifconfig 命令查看，发现两台主机的 MAC 地址是一样的，这就尴尬了，MAC 地址冲突啊（一般 VMware 在克隆主机的时候会改变 MAC 地址的，为什么我的没有改变，这让我很疑惑），将 MAC 地址随便改了一个，再次惊喜的发现两台主机能 ping 通了，通了。到此，我终于找到了问题的所在，好开心。修改 MAC 地址可以在 VMware 菜单栏中的虚拟机 -&gt; 设置 -&gt; 网络适配器 -&gt; 高级，然后点击生成就能随机生成一个 MAC 地址了。 为什么两台主机的 MAC 地址会一模一样呢？由于 B 主机是直接克隆 A 主机而来，所以 VMware 将 MAC 地址也一并克隆了，真是个大坑呐，开始我还真没意识到这个问题，花了好多宝贵的时间才跳出这个大坑。 到此，网络问题终于解决了，反思一下，其实我在一开始的时候就错了，我遇到问题的时候首先应该是独立思考，而不是直接上网找答案。导致虚拟机不能上网的问题有很多种，而且每个人遇到的问题也不尽相同，所以你要将所有别人的解决方法都尝试一遍，这非常浪费时间。正确的解决问题方法是，首先是要自己独立思考，而不是直接就上网查找答案，多么痛苦的领悟啊。","categories":[],"tags":[{"name":"虚拟机","slug":"虚拟机","permalink":"https://maoweipeng.github.io/tags/虚拟机/"}]}]}